#!/usr/bin/env raku
use Logger;
use Red:api<2>;
use Cro::WebApp::Template;
use lib './lib';

use Class2Uml;
use Exporter::Pod;
use Exporter::Graphviz;
use Exporter::PostgreSQL;
use RelationshipBuilder;
use RakuClass;

# my $*RED-DEBUG = True;
# red-defaults "Pg", :dbname("code_analysis_wb"), :host('/var/run/postgresql');
red-defaults "Pg", :dbname("code_analysis_wb"), :host('server'), :user('postgres'), :password('nordpol');

my %packages_postgresql = %(
    MeinAtikon => [
        {
            name => 'Route',
            matcher => regex {'Route'},
        },
        {
            name => 'Businesslogic',
            matcher => regex {'Businesslogic'},
        },
        {
            name => 'Model',
            matcher => regex {'Model'},
        },
        {
            name => 'View',
            matcher => regex {'View'},
        },
        {
            name => 'Test',
            matcher => regex {'Test'},
        },
    ]
);

my %*SUB-MAIN-OPTS =
  :named-anywhere,    # allow named parameters after positional ones
;

my $log = Logger.new;
Logger.add($log);

my $class2uml = Class2Uml.new;
my RelationshipBuilder $relationshipBuilder .= new;

multi sub MAIN(*@path, :$export where * ~~ /'pod'|'graphviz' | 'postgresql'/ = 'graphviz', :$file = './classes', Bool :$debug=False) {
    $log.level = Logger::DEBUG if $debug;
    my @pathes;
    for @path -> $item {
       my $item_path = $item.IO;
       if $item_path.d {
           @pathes.append: search-classes($item_path);
       }
       elsif $item_path.f {
           @pathes.push: $item_path;
       }
    }

    my %classes;
    my @class_data = parse-classes(@pathes);
    return unless @class_data.elems > 0;
    %classes<classes> = @class_data;
    %classes = $relationshipBuilder.get-relationships(%classes) unless @pathes.elems == 1;

    my $exporter = get-exporter($export, $file);
    $exporter.save(%classes);
}

sub search-classes($dir) {
    my @classes;
    for $dir.dir -> $item {
        if $item.d {
            @classes.append: search-classes($item);
            next;
        }

        if $item.f {
            if $item.extension eq any('pm6', 'rakumod') {
                @classes.push: $item;
            }
        }
    }

    return @classes;
}

sub parse-classes(@classes) {
    my @classes_data;
    for @classes -> $class {
        try {
            @classes_data.push: $class2uml.parse($class);

            CATCH { default { say $_.message } }
        }
    }

    return @classes_data;
}

sub get-exporter($type, $file) {
    unless $file.IO.parent.e {
        die "'{$file.IO.parent}' does not exist";
    }

    my $file_path = $file.IO;
    my $exporter;
    if $type eq 'graphviz' {
        unless $file.IO.basename.ends-with('.dot') {
            $file_path = $file.IO.absolute ~ '.dot';
        }
        $exporter = Exporter::Graphviz.new(file-path => $file_path.IO);
    } elsif $type eq 'pod' {
        unless $file_path.basename.ends-with('.pod') {
            $file_path = $file.IO.absolute ~ '.pod';
        }
        $exporter = Exporter::Pod.new(file-path => $file_path.IO);
    } elsif $type eq 'postgresql' {
        $exporter = Exporter::PostgreSQL.new(packages => %packages_postgresql);
    } else {
        die "No Exporter for '$type' found";
    }

    return $exporter;
}