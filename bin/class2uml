#!/usr/bin/env raku
use Cro::WebApp::Template;
use lib './lib';

use Class2Uml;
use Exporter::Pod;
use Exporter::Graphviz;
use RelationshipBuilder;
use RakuClass;

my $class2uml = Class2Uml.new;
my RelationshipBuilder $relationshipBuilder .= new;

multi sub MAIN($path, :$export where * ~~ /'pod'|'graphviz'/ = 'graphviz', :$file = './classes') {
    my $item_path = $path.IO;
    my $exporter = get-exporter($export, $file);

    if $item_path.d {
        my @classes = search-classes($item_path);

        my @classes_data;
        for @classes -> $class {
            try {
                @classes_data.push: $class2uml.parse($class);

                CATCH { default { say $_.message }}
            }
        }

        my %classes;
        %classes<classes> = @classes_data;
        %classes = $relationshipBuilder.get-relationships(%classes);

        if @classes_data.elems > 0 {
            $exporter.save(%classes);
        }
    }

    if $item_path.f {
        my $data = $class2uml.parse($item_path);
        my %classes;
        %classes<classes> = [$data];
        $exporter.save(%classes);
    }
}

sub search-classes($dir) {
    my @classes;
    for $dir.dir -> $item {
        if $item.d {
            @classes.append: search-classes($item);
            next;
        }

        if $item.f {
            if $item.extension eq any('pm6', 'rakumod') {
                @classes.push: $item;
            }
        }
    }

    return @classes;
}

sub get-exporter($type, $file) {
    unless $file.IO.parent.e {
        die "'{$file.IO.parent}' does not exist";
    }

    my $file_path = $file.IO;
    my $exporter;
    if $type eq 'graphviz' {
        unless $file.IO.basename.ends-with('.dot') {
            $file_path = $file.IO.absolute ~ '.dot';
        }
        $exporter = Exporter::Graphviz.new(file-path => $file_path.IO);
    } else {
        unless $file_path.basename.ends-with('.pod') {
            $file_path = $file.IO.absolute ~ '.pod';
        }
        $exporter = Exporter::Pod.new(file-path => $file_path.IO);
    }
}